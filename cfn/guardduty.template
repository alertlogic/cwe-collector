{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Alert Logic template for creating a CloudWatch events collector for Guard Duty events",
   "Parameters":{
      "AccessKeyId":{
          "Description":"Alertlogic Access Key Id obtained from AIMS",
          "Type":"String"
      },
      "SecretKey":{
          "Description":"Alertlogic Secret Key returned from AIMS for the Access Key Id",
          "Type":"String",
          "NoEcho": true
      },
      "AlApiEndpoint": {
          "Description":"Alert Logic API endpoint",
          "Type": "String",
          "Default": "api.global-services.global.alertlogic.com",
          "AllowedValues" : [
               "api.global-services.global.alertlogic.com",
               "api.global-integration.product.dev.alertlogic.com"
          ]
      },
      "AlDataResidency":{
          "Description":"Alert Logic Data Residency",
          "Type":"String",
          "Default" : "default",
          "AllowedValues" : ["default"]
      },
      "CollectorId": {
        "Description": "Optional. A collector UUID if known.",
        "Type": "String",
        "Default": "none"
    },
    "AlApplicationId": {
        "Description": "Alert Logic Application Id for collected logs",
        "Type": "String",
        "Default": "guardduty"
    },
    "EnableKMSKeyRotation": {
        "Description": "Enable automatic KMS key rotation. Incur additional AWS charges.",
        "Type": "String",
        "AllowedValues" : ["True", "False"],
        "Default": "False"
    },
    "KinesisShardCount": {
        "Description": "Collector kinesis stream shard count.",
        "Type": "Number",
        "Default": "1"
    }
   },
   "Metadata" : {
     "AWS::CloudFormation::Interface" : {
       "ParameterGroups" : [
         {
           "Label" : { "default" : "Alert Logic credentials" },
           "Parameters" : [
             "AlApiEndpoint",
             "AccessKeyId",
             "SecretKey"
           ]
         },
         {
           "Label" : { "default":"Guard Duty collector configuration" },
           "Parameters" : [
             "CollectorId",
             "AlDataResidency",
             "AlApplicationId",
             "EnableKMSKeyRotation",
             "KinesisShardCount"
           ]
         }
       ]
     }
   },
   "Resources":{
      "KinesisStream":{
         "Type":"AWS::Kinesis::Stream",
         "DependsOn" : [
         ],
         "Properties":{
            "ShardCount" : { "Ref": "KinesisShardCount"},
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "AlertLogic CWE collector"
                },
                {
                    "Key": "AlertLogic",
                    "Value": "Collect"
                }
            ]
         }
      },
      "CollectLambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "Path":"/",
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            }
         }
      },
        "LambdaKmsKey": {
            "Type": "AWS::KMS::Key",
            "DependsOn":[
                "CollectLambdaRole",
                "EncryptLambdaRole"
            ],
            "Properties": {
               "Description": "kms key used to encrypt credentials for lambda",
               "EnableKeyRotation": { "Ref": "EnableKMSKeyRotation"},
               "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "al-kms-policy",
                    "Statement": [
                        {
                            "Sid": "Enable IAM User Permissions",
                            "Effect": "Allow",
                            "Principal": {
                            "AWS": {
                             "Fn::Join": [
                               ":",
                               [
                                 "arn:aws:iam",
                                 "",
                                 {
                                   "Ref": "AWS::AccountId"
                                 },
                                 "root"
                               ]
                             ]
                            }
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                       },
                       {
                            "Sid": "Allow use of the key for lambda",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": {
                                "Fn::GetAtt": [
                                  "CollectLambdaRole",
                                  "Arn"
                                ]
                              }
                            },
                            "Action": [
                              "kms:Decrypt",
                              "kms:Encrypt"
                            ],
                            "Resource": "*"
                       },
                       {
                          "Sid": "Allow use of the key for lambda encryption",
                          "Effect": "Allow",
                          "Principal": {
                             "AWS": {
                                "Fn::GetAtt": [
                                   "EncryptLambdaRole",
                                   "Arn"
                                ]
                             }
                          },
                          "Action": [
                             "kms:Encrypt"
                          ],
                          "Resource": "*"
                       }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AlertLogic CWE collector"
                    },
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "BasicLambdaRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "Path":"/",
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                   ]
                }
            }
        },
        "EncryptLambdaRole":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "Path":"/",
                "AssumeRolePolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Principal":{
                                "Service":[
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                   ]
                }
            }
        },
        "EncryptLambdaPolicy":{
            "Type":"AWS::IAM::Policy",
            "DependsOn":[
                "EncryptLambdaRole",
                "EncryptLambdaFunction"
            ],
            "Properties":{
                "Roles":[
                   {
                      "Ref":"EncryptLambdaRole"
                   }
                ],
                "PolicyName":"alertlogic-encrypt-lambda-policy",
                "PolicyDocument":{
                    "Version":"2012-10-17",
                    "Statement":[
                        {
                            "Effect":"Allow",
                            "Action":"logs:CreateLogGroup",
                            "Resource":[
                                {
                                    "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect":"Allow",
                            "Action":[
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource":[
                                {
                                   "Fn::Join":[
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref":"AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/",
                                            {
                                                "Ref":"EncryptLambdaFunction"
                                            },
                                            ":log-stream:*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "EncryptLambdaFunction":{
            "Type":"AWS::Lambda::Function",
            "DependsOn":[
                "EncryptLambdaRole"
            ],
            "Properties":{
                "Description":"Alert Logic Lambda Encrypt function",
                "Role":{
                    "Fn::GetAtt":[
                        "EncryptLambdaRole",
                        "Arn"
                    ]
                },
                "Code":{
                    "ZipFile": {
                       "Fn::Join": [
                           "",
                           [
                                "const AWS = require('aws-sdk');\n",
                                "const response = require('./cfn-response');\n",
                                "\n",
                                "\n",
                                "function encrypt(event, context) {\n",
                                "    const params = {\n",
                                "        KeyId: event.ResourceProperties.KeyId,\n",
                                "        Plaintext: event.ResourceProperties.Plaintext\n",
                                "    };\n",
                                "    const kms = new AWS.KMS();\n",
                                "    kms.encrypt(params, function(err, data) {\n",
                                "        if (err) {\n",
                                "            console.log(err, err.stack); // an error occurred\n",
                                "            return response.send(event, context, response.FAILED);\n",
                                "        }\n",
                                "        var base64 = Buffer.from(data.CiphertextBlob).toString('base64');\n",
                                "        var responseData = {\n",
                                "            EncryptedText : base64\n",
                                "        };\n",
                                "        return response.send(event, context, response.SUCCESS, responseData);\n",
                                "    });\n",
                                "}\n",
                                "\n",
                                "\n",
                                "exports.handler = (event, context, callback) => {\n",
                                "    if (event.ResourceType == 'AWS::CloudFormation::CustomResource' &&\n",
                                "        event.RequestType == 'Create') {\n",
                                "        return encrypt(event, context);\n",
                                "    }\n",
                                "    return response.send(event, context, response.SUCCESS);\n",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler":"index.handler",
                "Runtime":"nodejs18.x",
                "MemorySize":128,
                "Timeout": 5,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AlertLogic CWE collector"
                    },
                    {
                        "Key": "AlertLogic",
                        "Value": "Collect"
                    }
                ]
            }
        },
        "EncryptSecretKeyCustomResource": {
            "Type": "AWS::CloudFormation::CustomResource",
            "DependsOn": [
                "LambdaKmsKey",
                "EncryptLambdaFunction",
                "EncryptLambdaPolicy"
            ],
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EncryptLambdaFunction",
                        "Arn"
                    ]
                },
                "KeyId": {
                    "Fn::GetAtt": [
                        "LambdaKmsKey",
                        "Arn"
                    ]
                },
                "Plaintext": {
                    "Ref": "SecretKey"
                },
                "Timeout": 300
            }
        },
      "CollectLambdaFunction":{
         "Type":"AWS::Lambda::Function",
         "DependsOn":[
            "CollectLambdaRole",
            "LambdaKmsKey",
            "EncryptSecretKeyCustomResource"
         ],
         "Properties":{
            "Description":"Alert Logic Lambda Guard Duty event collector",
            "FunctionName":"alertlogic-cwe-collector",
            "Role":{
               "Fn::GetAtt":[
                  "CollectLambdaRole",
                  "Arn"
               ]
            },
            "KmsKeyArn": {
               "Fn::GetAtt": [
                  "LambdaKmsKey",
                  "Arn"
               ]
            },
            "Code":{
               "S3Bucket":{"Fn::Join" : ["", [
                    "alertlogic-collectors-",
                    { "Ref" : "AWS::Region" }
               ]]},
               "S3Key": "packages/lambda/al-cwe-collector.zip"
            },
            "Handler":"index.handler",
            "Runtime":"nodejs18.x",
            "MemorySize":128,
            "Timeout":300,
            "Environment":{
               "Variables":{
                  "aims_access_key_id": {
                      "Ref":"AccessKeyId"
                  },
                  "aims_secret_key":{
                      "Fn::GetAtt": ["EncryptSecretKeyCustomResource", "EncryptedText"]
                  },
                  "aws_lambda_s3_bucket":{"Fn::Join" : ["", [
                      "alertlogic-collectors-",
                      { "Ref" : "AWS::Region" }
                  ]]},
                  "aws_lambda_zipfile_name": "packages/lambda/al-cwe-collector.zip",
                  "aws_lambda_update_config_name": "configs/lambda/al-cwe-collector.json",
                  "al_api":{
                      "Ref":"AlApiEndpoint"
                  },
                  "al_data_residency":{
                      "Ref":"AlDataResidency"
                  },
                  "collector_id": {
                    "Ref":"CollectorId"
                  },
                  "stack_name": {
                    "Ref":"AWS::StackName"
                  },
                  "al_application_id":{
                    "Ref":"AlApplicationId"
                }
               }
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "AlertLogic CWE collector"
                },
                {
                    "Key": "AlertLogic",
                    "Value": "Collect"
                }
            ]
         }
      },
      "CollectLambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "DependsOn":[
            "CollectLambdaFunction",
            "CollectLambdaRole",
            "KinesisStream"
         ],
         "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-guardduty-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":"logs:CreateLogGroup",
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:logs:",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 ":",
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 ":log-group:/aws/lambda/",
                                 {
                                    "Ref":"CollectLambdaFunction"
                                 },
                                 ":*"
                              ]
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                     ],
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:logs:",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 ":",
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 ":log-group:/aws/lambda/",
                                 {
                                    "Ref":"CollectLambdaFunction"
                                 },
                                 ":log-stream:*"
                              ]
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:*"
                     ],
                     "Resource":[
                        {
                           "Fn::GetAtt":[
                               "CollectLambdaFunction",
                               "Arn"
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "kinesis:*"
                     ],
                     "Resource":[
                        {
                           "Fn::GetAtt":[
                               "KinesisStream",
                               "Arn"
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:Get*"
                     ],
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Fn::Join" : ["", [
                                        "alertlogic-collectors-",
                                        { "Ref" : "AWS::Region" }
                                    ]]
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "HealthCheckLambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "DependsOn":[
              "CollectLambdaRole",
              "CloudWatchEventsRule"
         ],
         "Properties":{
            "Roles":[
               {
                  "Ref":"CollectLambdaRole"
               }
            ],
            "PolicyName":"alertlogic-health-check-lambda-policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudformation:DescribeStacks"
                     ],
                     "Resource":[
                          {
                             "Fn::Join":[
                                  "",
                                  [
                                      "arn:aws:cloudformation:",
                                      {
                                          "Ref":"AWS::Region"
                                      },
                                      ":",
                                      {
                                          "Ref":"AWS::AccountId"
                                      },
                                      ":stack/",
                                      {
                                          "Ref":"AWS::StackName"
                                      },
                                      "/*"
                                  ]
                              ]
                          }
                      ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "events:DescribeRule",
                        "events:ListTargetsByRule"
                     ],
                     "Resource":[
                        {
                           "Fn::GetAtt":[
                               "CloudWatchEventsRule",
                               "Arn"
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:ListEventSourceMappings"
                     ],
                     "Resource": "*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "cloudwatch:Get*",
                        "cloudwatch:Describe*",
                        "cloudwatch:List*"
                     ],
                     "Resource": "*"
                  }
               ]
            }
         }
      },
      "CloudWatchEventsRule":{
         "Type":"AWS::Events::Rule",
         "DependsOn":[
            "CollectLambdaPolicy",
            "KinesisStream",
            "CloudWatchEventsRole"
         ],
         "Properties":{
            "Description":"CloudWatch events rule for Guard Duty events",
            "EventPattern":{
                "detail-type":[
                  "GuardDuty Finding"
               ],
               "source":[
                  "aws.guardduty"
               ]
            },
            "ScheduleExpression":"",
            "State":"ENABLED",
            "Targets":[
               {
                  "Id":"1",
                  "Arn":{
                     "Fn::GetAtt":[
                        "KinesisStream",
                        "Arn"
                     ]
                  },
                  "RoleArn" : {
                     "Fn::GetAtt" : ["CloudWatchEventsRole", "Arn"] 
                  }
               }
            ]
         }
      },
      "UpdaterScheduledRule": {
         "Type": "AWS::Events::Rule",
         "DependsOn": [
            "CollectLambdaPolicy",
            "CollectLambdaFunction"
         ],
         "Properties": {
            "Description": "Scheduled rule for updater function",
            "ScheduleExpression": "rate(12 hours)",
            "State": "ENABLED",
            "Targets":[
                {
                    "Id":"1",
                    "Arn":{
                        "Fn::GetAtt":[
                            "CollectLambdaFunction",
                            "Arn"
                        ]
                    },
                    "Input": "{\"RequestType\": \"ScheduledEvent\", \"Type\": \"SelfUpdate\"}"
                }
            ]
         }
      },
      "UpdaterScheduledRuleLambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "UpdaterScheduledRule"
          ],
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": {
              "Ref": "CollectLambdaFunction"
            },
            "Principal": "events.amazonaws.com",
            "SourceArn":{
              "Fn::GetAtt": [
                "UpdaterScheduledRule",
                "Arn"
              ]
            }
          }
      },
      "CloudWatchEventsRole":{
         "Type": "AWS::IAM::Role",
         "DependsOn":[
            "KinesisStream",
            "CollectLambdaFunction",
            "CollectLambdaPolicy"
         ],
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "events.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [
                    {
                      "Effect":"Allow",
                      "Action":[
                        "kinesis:PutRecord",
                        "kinesis:PutRecords",
                        "kinesis:GetRecords",
                        "kinesis:GetShardIterator",
                        "kinesis:DescribeStream"
                      ],
                      "Resource":[
                        {
                           "Fn::GetAtt":[
                               "KinesisStream",
                               "Arn"
                           ]
                        }
                      ]
                    },
                    {
                      "Effect":"Allow",
                      "Action":[
                        "kinesis:ListStreams"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect":"Allow",
                      "Action":[
                         "lambda:*"
                      ],
                      "Resource":[
                         {
                            "Fn::GetAtt":[
                                "CollectLambdaFunction",
                                "Arn"
                            ]
                         }
                      ]
                    }
                  ]
               }
            }]
         }
      },
      "CollectLambdaEventSourceMapping":{
         "Type":"AWS::Lambda::EventSourceMapping",
         "DependsOn":[
            "CollectLambdaFunction",
            "CollectLambdaRole",
            "CollectLambdaPolicy",
            "KinesisStream",
            "CloudWatchEventsRole"
         ],
         "Properties":{
            "EventSourceArn" : { "Fn::GetAtt" : ["KinesisStream", "Arn"] },
            "FunctionName" : { "Ref":"CollectLambdaFunction" },
            "StartingPosition" : "TRIM_HORIZON"
         }
      },
      "CheckinScheduledRule": {
         "Type": "AWS::Events::Rule",
         "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "HealthCheckLambdaPolicy",
            "KinesisStream",
            "CloudWatchEventsRule",
            "CollectLambdaEventSourceMapping"
         ],
         "Properties": {
            "Description": "Scheduled rule for checkin function",
            "ScheduleExpression": "rate(15 minutes)",
            "State": "ENABLED",
            "Targets":[
                {
                    "Id":"1",
                    "Arn":{
                        "Fn::GetAtt":[
                            "CollectLambdaFunction",
                            "Arn"
                        ]
                    },
                    "Input": {
                        "Fn::Join":[
                            "",
                            [
                                "{\"RequestType\": \"ScheduledEvent\", \"Type\": \"Checkin\", \"AwsAccountId\": \"",
                                {
                                    "Ref":"AWS::AccountId"
                                },
                                "\", \"Region\": \"",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\", \"StackName\": \"",
                                {
                                    "Ref":"AWS::StackName"
                                },
                                "\", \"KinesisArn\": \"",
                                {
                                   "Fn::GetAtt":[
                                      "KinesisStream",
                                      "Arn"
                                   ]
                                },
                                "\", \"CloudWatchEventsRule\": \"", { "Ref": "CloudWatchEventsRule" },
                                "\", \"CweRulePattern\": \"{\\\"detail-type\\\":[\\\"GuardDuty Finding\\\"],\\\"source\\\":[\\\"aws.guardduty\\\"]}\"",
                                "}"
                            ]
                        ]
                    }
                }
            ]
         }
      },
      "CheckinScheduledRuleLambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy",
            "HealthCheckLambdaPolicy",
            "CheckinScheduledRule"
          ],
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": {
              "Ref": "CollectLambdaFunction"
            },
            "Principal": "events.amazonaws.com",
            "SourceArn":{
              "Fn::GetAtt": [
                "CheckinScheduledRule",
                "Arn"
              ]
            }
          }
      },
      "RegistrationResource": {
         "Type": "Custom::RegistrationResource",
         "DependsOn": [
            "CollectLambdaFunction",
            "CollectLambdaPolicy"
         ],
         "Properties": {
            "ServiceToken": { "Fn::GetAtt" : ["CollectLambdaFunction", "Arn"] },
            "StackName": { "Ref" : "AWS::StackName" },
            "AwsAccountId": { "Ref": "AWS::AccountId"},
            "CollectRule": "aws.guardduty",
            "Timeout": 300
         }
      }
   }
}
